// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dataful "github.com/Amazeful/dataful"
import mock "github.com/stretchr/testify/mock"
import options "go.mongodb.org/mongo-driver/mongo/options"
import primitive "go.mongodb.org/mongo-driver/bson/primitive"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteOne provides a mock function with given fields: ctx, filter, opts
func (_m *Repository) DeleteOne(ctx context.Context, filter primitive.M, opts ...*options.DeleteOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, ...*options.DeleteOptions) error); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, filter, results, opts
func (_m *Repository) FindAll(ctx context.Context, filter primitive.M, results []dataful.Model, opts ...*options.FindOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, results)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, []dataful.Model, ...*options.FindOptions) error); ok {
		r0 = rf(ctx, filter, results, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: ctx, filter, document, opts
func (_m *Repository) FindOne(ctx context.Context, filter primitive.M, document dataful.Model, opts ...*options.FindOneOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, dataful.Model, ...*options.FindOneOptions) error); ok {
		r0 = rf(ctx, filter, document, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOne provides a mock function with given fields: ctx, document, opts
func (_m *Repository) InsertOne(ctx context.Context, document dataful.Model, opts ...*options.InsertOneOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dataful.Model, ...*options.InsertOneOptions) error); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceOne provides a mock function with given fields: ctx, filter, replacement, opts
func (_m *Repository) ReplaceOne(ctx context.Context, filter primitive.M, replacement dataful.Model, opts ...*options.ReplaceOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, dataful.Model, ...*options.ReplaceOptions) error); ok {
		r0 = rf(ctx, filter, replacement, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
